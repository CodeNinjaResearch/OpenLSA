class LGJCbord {

  int baudRate; // 2
  double word serial serial_port_object; // 5 -> 8
  bool serialPortOpenedOkay; //24
  bool classReceiveBufferOkay?; // 25
  bool someNotTestModeThing; // 26
  char* classSendBuffer; // 32 to 37/38?
  byte other_checksum_variable //38
  char* serialSendBuffer; // 39 to 45
  char* classReceiveBuffer; // 46 to 067
  char* serialReceiveBuffer; // 68 to 195


  void *__cdecl LGJCbord::init(LGJCbord *this)
  {
    bool testMode; // zf@1
    _lgjSCI *tmpSerialPortObject; // eax@1
    LGJCbord *v4; // eax@5
    signed int v5; // edx@5
    int v6; // eax@7
    signed int v7; // eax@7
    void *result; // eax@9
    acpSystem *v9; // [esp+0h] [ebp-18h]@1
    _sSystem *timeObject; // [esp+0h] [ebp-18h]@3
    acpSystem *v11; // [esp+0h] [ebp-18h]@10

    serial_port_object = new _lgjSCI();
    testMode = g_bTestMode == 0;
    v3 = serial_port_object;

    if ( !testMode )
      goto LABEL_2;
    if ( !acpSystem::getChuteType(v9) && !acpSystem::getServiceType(v11) )
    {
      tmpSerialPortObject = serial_port_object;
  LABEL_2:
      *((_DWORD *)this + 85) = 0;
      goto LABEL_3;
    }
    tmpSerialPortObject = serial_port_object;
    *((_DWORD *)this + 85) = 211;
  LABEL_3:
    *((_BYTE *)this + 196) = 0;
    *((_BYTE *)this + 208) = 0;
    classReceiveBufferOkay = 0;
    testMode = g_bTestMode == 0;
    *((_DWORD *)this + 50) = 1;
    *((_DWORD *)this + 51) = 0;
    someNotTestModeThing = !testMode;
    baudRate = 115200;
    *((_DWORD *)this + 3) = 1;
    *((_DWORD *)this + 4) = 0;
    if ( _lgjSCI::open(tmpSerialPortObject, 1)) { // 1 is probably port numbe{
      serialPortOpenedOkay = 1;
      _lgjSCI::changeParam(serial_port_object, (char *)this + 8);
    } else {
      serialPortOpenedOkay = 0;
    }

    *((_BYTE *)this + 216) = 1;
    *((_BYTE *)this + 217) = 1;
    *((_BYTE *)this + 309) = 1;
    *((_BYTE *)this + 233) = 0;
    *((_DWORD *)this + 59) = 1065749138;
    *((_DWORD *)this + 81) = 0;
    *((_BYTE *)this + 328) = 0;
    *((_DWORD *)this + 83) = 0;
    *((_BYTE *)this + 336) = 0;
    *((_DWORD *)this + 55) = 0;
    *((_BYTE *)this + 240) = 0;
    *((_BYTE *)this + 218) = 0;
    *((_DWORD *)this + 56) = 3;
    *((_BYTE *)this + 241) = 0;
    *((_DWORD *)this + 61) = 0;
    *((_DWORD *)this + 63) = 0;
    *((_DWORD *)this + 57) = 0;
    *((_BYTE *)this + 232) = 0;
    *((_BYTE *)this + 256) = 0;
    *((_DWORD *)this + 65) = 0;
    *((_DWORD *)this + 67) = 0;
    *((_BYTE *)this + 272) = 0;
    *((_DWORD *)this + 69) = 0;
    *((_DWORD *)this + 71) = 0;
    *((_BYTE *)this + 288) = 0;
    *((_BYTE *)this + 289) = 0;
    *((_DWORD *)this + 73) = 0;
    *((_DWORD *)this + 74) = 0;
    *((_DWORD *)this + 75) = 0;
    *((_DWORD *)this + 76) = 0;
    *((_BYTE *)this + 308) = 0;
    *((_BYTE *)this + 310) = 64;
    *((_BYTE *)this + 311) = 0;
    v4 = this;
    *((_BYTE *)this + 312) = 0;
    v5 = 1;
    *((_BYTE *)this + 313) = 0;
    *((_BYTE *)this + 320) = 1;
    *((_BYTE *)this + 314) = 0;
    *((_BYTE *)this + 315) = 0;
    *((_DWORD *)this + 79) = 0;
    do
    {
      *((_DWORD *)v4 + 88) = 0;
      *((_DWORD *)v4 + 89) = 0;
      *((_DWORD *)v4 + 90) = 0;
      *((_DWORD *)v4 + 91) = 0;
      *((_DWORD *)v4 + 92) = 0;
      *((_DWORD *)v4 + 93) = 0;
      v4 = (LGJCbord *)((char *)v4 + 24);
      --v5;
    }
    while ( v5 >= 0 );
    v6 = _sSystem::getTime(timeObject);
    *((_BYTE *)this + 32) = 0;
    *((_BYTE *)this + 33) = 0;
    *((_DWORD *)this + 100) = v6;
    *((_BYTE *)this + 34) = 0;
    *((_BYTE *)this + 35) = 0;
    *((_BYTE *)this + 36) = 0;
    *((_BYTE *)this + 37) = 0;
    *((_BYTE *)this + 38) = 0;
    memset(serialSendBuffer, 0, 7);
    memset(classReceiveBuffer, 0, 22)
    *((_BYTE *)this + 240) = 0;
    result = memset((char *)this + 68, 0, 0x80u);
    *((_BYTE *)this + 344) = -18;
    *((_DWORD *)this + 87) = -1;
    *((_DWORD *)this + 1) = 0;
    return result;
  }

  int __cdecl LGJCbord::exec(LGJCbord *this)
  {
    bool temp_serial_open_check; // zf@1
    unsigned __int8 v2; // al@3
    int v3; // edx@3
    char v4; // dl@10
    unsigned __int8 v5; // dl@12
    int v6; // esi@13
    char v7; // dl@16
    int v8; // eax@22
    bool v9; // sf@22
    char v10; // cl@25
    char v11; // dl@26
    int result; // eax@42
    char v13; // al@45
    char v14; // dl@45
    int v15; // eax@47
    int v16; // edx@47
    float v17; // xmm0_4@48
    float v19; // ST18_4@49
    signed int v20; // esi@49
    char v21; // al@49
    char v22; // cl@64
    signed int v23; // ecx@67
    _sSystem *v24; // [esp+0h] [ebp-28h]@15
    _sSystem *v25; // [esp+0h] [ebp-28h]@47

    temp_serial_open_check = serialPortOpenedOkay == 0;
    *((_BYTE *)this + 232) = *((_BYTE *)this + 66);
    if ( temp_serial_open_check  )
      *((_DWORD *)this + 50) = 0;
    else
      *((_DWORD *)this + 50) = LGJCbord::recv(this);
    v2 = *((_BYTE *)this + 49);
    v3 = (*((unsigned __int8 *)this + 52) << 16) | (*((unsigned __int8 *)this + 51) << 8) | *((unsigned __int8 *)this + 50);
    *((_DWORD *)this + 53) = v3;
    if ( v2 & 0xF && v2 <= 0xCu )
      *((_BYTE *)this + 240) = v2;
    if ( BYTE1(v3) & 0x10 )
      *((_BYTE *)this + 216) = 0;
    if ( BYTE1(v3) & 0x20 )
      *((_BYTE *)this + 217) = 0;
    v4 = *((_BYTE *)this + 47);
    if ( (unsigned __int8)(v4 - 2) <= 2u )
    {
      ++*((_DWORD *)this + 81);
      *((_BYTE *)this + 328) = v4;
    }
    v5 = *((_BYTE *)this + 53);
    if ( (unsigned __int8)(v5 - 1) <= 9u )
    {
      v6 = *((_DWORD *)this + 85);
      ++*((_DWORD *)this + 83);
      *((_BYTE *)this + 336) = v5;
      if ( !v6 )
        *((_DWORD *)this + 85) = v5 + 200;
    }
    LGJCbord::check_seat_param(this);
    LGJCbord::set_param(this);
    v1 = *((_BYTE *)this + 25) == 0;
    *((_BYTE *)this + 32) = -64;
    if ( v1 )
    {
      v7 = *((_BYTE *)this + 209);
      *((_BYTE *)this + 34) = 0;
      *((_BYTE *)this + 33) = v7;
      if ( v7 == 19 )
      {
        v22 = *((_BYTE *)this + 313);
        *((_BYTE *)this + 35) = *((_BYTE *)this + 289);
        *((_BYTE *)this + 37) = v22;
      }
      else
      {
        *((_BYTE *)this + 35) = 0;
        *((_BYTE *)this + 37) = 0;
      }
      *(this + 36) = *(this + 308);
  LABEL_19:
      *((_BYTE *)this + 38) = 0;
      if ( !g_bSpecialCabinet )
        goto LABEL_28;
      goto LABEL_20;
    }
    v10 = *((_BYTE *)this + 209);
    *((_BYTE *)this + 33) = v10;
    if ( v10 != 19 && (unsigned __int8)(v10 - 12) > 2u )
    {
      v11 = *((_BYTE *)this + 308);
      *((_BYTE *)this + 34) = 0;
      *((_BYTE *)this + 35) = 0;
      *((_BYTE *)this + 36) = v11;
      if ( v10 != 19 )
        goto LABEL_27;
  LABEL_46:
      *((_BYTE *)this + 37) = *((_BYTE *)this + 313);
      goto LABEL_19;
    }
    v13 = *((_BYTE *)this + 218);
    *((_BYTE *)this + 35) = *((_BYTE *)this + 289);
    v14 = *(this + 308);
    *((_BYTE *)this + 34) = v13;
    *(this + 36) = v14;
    if ( v10 == 19 )
      goto LABEL_46;
  LABEL_27:
    *((_BYTE *)this + 37) = 0;
    *((_BYTE *)this + 38) = 0;
    if ( !g_bSpecialCabinet )
      goto LABEL_28;
  LABEL_20:
    if ( !*((_BYTE *)this + 196) )
    {
      *((_DWORD *)this + 51) = 0;
  LABEL_63:
      *((_BYTE *)this + 208) = 0;
      goto LABEL_28;
    }
    if ( !*((_DWORD *)this + 50) )
    {
      *((_DWORD *)this + 51) = 0;
      *((_BYTE *)this + 208) = 1;
      goto LABEL_28;
    }
    v8 = *((_DWORD *)this + 51) + 1;
    v9 = *((_DWORD *)this + 51) - 179 < 0;
    *((_DWORD *)this + 51) = v8;
    if ( !((unsigned __int8)(v9 ^ __OFSUB__(v8, 180)) | (v8 == 180)) )
    {
      if ( !*((_DWORD *)g_pCbord + 85) )
        *((_DWORD *)g_pCbord + 85) = 209;
      goto LABEL_63;
    }
  LABEL_28:
    if ( *((_BYTE *)this + 24) && *((_BYTE *)this + 26) )
      *((_BYTE *)this + 196) = LGJCbord::send(this);
    else
      *((_BYTE *)this + 196) = 0;
    if ( *((_BYTE *)this + 196) )
    {
      v15 = _sSystem::getTime(v24);
      v16 = v15 - *((_DWORD *)this + 100);
      if ( v15 - *((_DWORD *)this + 100) < 0 )
      {
        v23 = v16 & 1 | ((unsigned int)(v15 - *((_DWORD *)this + 100)) >> 1);
        v17 = (float)v23 + (float)v23;
      }
      else
      {
        v17 = (float)v16;
      }
      _FST7 = (float)(v17 * 0.001);
      __asm { frndint }
      v19 = _FST7;
      v20 = (signed int)v19;
      *((_DWORD *)this + 100) = _sSystem::getTime(v25);
      v21 = *((_BYTE *)this + 35);
      if ( v21 & 0x10 )
        *((_DWORD *)this + 91) += v20;
      if ( v21 & 0x20 )
        *((_DWORD *)this + 97) += v20;
      if ( v21 & 1 )
        *((_DWORD *)this + 92) += v20;
      if ( v21 & 2 )
        *((_DWORD *)this + 98) += v20;
      if ( v21 & 4 )
        *((_DWORD *)this + 93) += v20;
      if ( v21 & 8 )
        *((_DWORD *)this + 99) += v20;
    }
    if ( (unsigned __int8)_sInterfaceJvs::checkTrgOn(1, 0x2000000) )
      ++*((_DWORD *)this + 88);
    if ( (unsigned __int8)_sInterfaceJvs::checkTrgOn(2, 0x2000000) )
      ++*((_DWORD *)this + 94);
    if ( (unsigned __int8)_sInterfaceJvs::checkTrgOn(1, 0x800000) )
      ++*((_DWORD *)this + 89);
    if ( (unsigned __int8)_sInterfaceJvs::checkTrgOn(2, 0x800000) )
      ++*((_DWORD *)this + 95);
    if ( (unsigned __int8)_sInterfaceJvs::checkTrgOn(1, 0x400000) )
      ++*((_DWORD *)this + 90);
    result = _sInterfaceJvs::checkTrgOn(2, 0x400000);
    if ( (_BYTE)result )
      ++*((_DWORD *)this + 96);
    return result;
  }

  char __cdecl LGJCbord::check_seat_param(LGJCbord *this)
  {
    int v1; // eax@1
    bool v2; // zf@11
    signed int v3; // ecx@19
    unsigned __int8 v4; // cl@24
    char v5; // al@25
    int v6; // eax@27
    unsigned __int8 v7; // al@29
    unsigned __int8 v8; // cl@29
    signed int v9; // ecx@41
    char v10; // bl@48
    signed int v11; // ecx@49
    bool v12; // zf@57
    unsigned __int8 v13; // al@62
    unsigned __int8 v14; // cl@62
    char v15; // cl@69
    int v16; // ebx@76

    v1 = *((_DWORD *)this + 61);
    switch ( v1 )
    {
      case 1:
        if ( *((_DWORD *)this + 56) != 3 )
        {
          v4 = *((_BYTE *)this + 49);
          v5 = 1;
          if ( v4 > 0xCu || !(v4 & 1) )
            v5 = 0;
          v1 = 3 - ((unsigned __int8)v5 < 1u);
          *((_DWORD *)this + 56) = v1;
        }
        return v1;
      case 2:
        v1 = *((_DWORD *)this + 56);
        if ( v1 != 1 )
        {
          if ( v1 > 1 )
          {
            if ( v1 != 2 )
              return v1;
            LOBYTE(v1) = *((_BYTE *)this + 241) & 0xF0;
            if ( (_BYTE)v1 == 16 )
            {
              if ( *((_BYTE *)this + 49) == 1 )
                goto LABEL_13;
            }
            else if ( (_BYTE)v1 == 32 )
            {
              if ( *((_BYTE *)this + 49) == 3 )
                goto LABEL_13;
              goto LABEL_8;
            }
            if ( (_BYTE)v1 == 48 )
            {
              if ( *((_BYTE *)this + 49) == 5 )
                goto LABEL_13;
  LABEL_9:
              if ( (_BYTE)v1 != 80 )
              {
  LABEL_10:
                if ( (_BYTE)v1 != 96 )
                  return v1;
                v2 = *((_BYTE *)this + 49) == 11;
                goto LABEL_12;
              }
              v2 = *((_BYTE *)this + 49) == 9;
  LABEL_12:
              if ( v2 )
                goto LABEL_13;
              return v1;
            }
  LABEL_8:
            if ( (_BYTE)v1 == 64 )
            {
              if ( *((_BYTE *)this + 49) == 7 )
                goto LABEL_13;
              goto LABEL_10;
            }
            goto LABEL_9;
          }
          if ( v1 )
            return v1;
          LOBYTE(v1) = *((_BYTE *)this + 49);
          v10 = *((_BYTE *)this + 241) & 0xF0;
          if ( (unsigned __int8)v1 > 0xCu || (v11 = 1, !(v1 & 1)) )
            v11 = 0;
          if ( !v11 )
            return v1;
          if ( v10 == 16 )
          {
            if ( (_BYTE)v1 == 1 )
              goto LABEL_13;
          }
          else if ( v10 == 32 )
          {
            if ( (_BYTE)v1 == 3 )
              goto LABEL_13;
            goto LABEL_54;
          }
          if ( v10 == 48 )
          {
            if ( (_BYTE)v1 == 5 )
              goto LABEL_13;
            goto LABEL_55;
          }
  LABEL_54:
          if ( v10 == 64 )
          {
            if ( (_BYTE)v1 == 7 )
              goto LABEL_13;
            goto LABEL_56;
          }
  LABEL_55:
          if ( v10 == 80 )
          {
            v12 = (_BYTE)v1 == 9;
            goto LABEL_58;
          }
  LABEL_56:
          if ( v10 != 96 )
            goto LABEL_43;
          v12 = (_BYTE)v1 == 11;
  LABEL_58:
          if ( v12 )
            goto LABEL_13;
          goto LABEL_43;
        }
        LOBYTE(v1) = *((_BYTE *)this + 49);
        if ( (_BYTE)v1 == 13 )
          goto LABEL_33;
        v15 = *((_BYTE *)this + 241) & 0xF0;
        if ( v15 == 16 )
        {
          if ( (_BYTE)v1 == 1 )
            goto LABEL_13;
        }
        else if ( v15 == 32 )
        {
          if ( (_BYTE)v1 == 3 )
            goto LABEL_13;
          goto LABEL_72;
        }
        if ( v15 == 48 )
        {
          if ( (_BYTE)v1 == 5 )
            goto LABEL_13;
          goto LABEL_73;
        }
  LABEL_72:
        if ( v15 == 64 )
        {
          if ( (_BYTE)v1 == 7 )
            goto LABEL_13;
          goto LABEL_74;
        }
  LABEL_73:
        if ( v15 == 80 )
        {
          v2 = (_BYTE)v1 == 9;
          goto LABEL_12;
        }
  LABEL_74:
        if ( v15 != 96 )
          return v1;
        v2 = (_BYTE)v1 == 11;
        goto LABEL_12;
      case 3:
        v6 = *((_DWORD *)this + 56);
        if ( !v6 )
          goto LABEL_40;
        v1 = v6 - 1;
        if ( !v1 )
        {
          v7 = *((_BYTE *)this + 49);
          v8 = v7;
          if ( !(v7 & 0xF) || v7 > 0xCu || (v1 = 1, v8 & 1) )
            v1 = 0;
          if ( v1 )
            goto LABEL_33;
        }
        return v1;
      case 4:
        v1 = *((_DWORD *)this + 56);
        if ( v1 == 1 )
        {
          v13 = *((_BYTE *)this + 49);
          v14 = v13;
          if ( !(v13 & 0xF) || v13 > 0xCu || (v1 = 1, v14 & 1) )
            v1 = 0;
          if ( !v1 )
            return v1;
          *((_DWORD *)this + 56) = 2;
  LABEL_38:
          *((_DWORD *)this + 57) = 30;
          return v1;
        }
        if ( v1 <= 1 )
          goto LABEL_39;
        if ( v1 == 2 )
        {
          if ( *((_BYTE *)this + 232) != *((_BYTE *)this + 66) )
            goto LABEL_38;
          v16 = *((_DWORD *)this + 57) - 1;
          v2 = *((_DWORD *)this + 57) == 1;
          *((_DWORD *)this + 57) = v16;
          if ( v16 < 0 || v2 )
  LABEL_13:
            *((_DWORD *)this + 56) = 3;
        }
        return v1;
      case 5:
        v1 = *((_DWORD *)this + 56);
        if ( v1 == 1 )
        {
  LABEL_33:
          *((_DWORD *)this + 56) = 2;
          return v1;
        }
        if ( v1 <= 1 )
        {
  LABEL_39:
          if ( !v1 )
          {
  LABEL_40:
            LOBYTE(v1) = *((_BYTE *)this + 49);
            if ( (unsigned __int8)v1 > 0xCu || (v9 = 1, !(v1 & 1)) )
              v9 = 0;
            if ( v9 )
  LABEL_43:
              *((_DWORD *)this + 56) = 1;
          }
        }
        else if ( v1 == 2 )
        {
          LOBYTE(v1) = *((_BYTE *)this + 49);
          if ( (unsigned __int8)v1 > 0xCu || (v3 = 1, !(v1 & 1)) )
            v3 = 0;
          if ( v3 )
            goto LABEL_13;
        }
        return v1;
      default:
        return v1;
    }
  }

  void __cdecl LGJCbord::set_seat_param(LGJCbord *this)
  {
    char v1; // di@1
    int v2; // edx@1
    unsigned int v3; // esi@3
    unsigned int v4; // ecx@11
    bool v5; // zf@13
    int v6; // eax@17
    int v7; // edx@23
    bool v8; // zf@32
    char v9; // al@34
    char v10; // al@39
    char v11; // dl@45
    char v12; // al@48
    char v13; // al@53
    int v14; // eax@61
    int v15; // esi@66
    int v16; // edx@69
    int v17; // eax@73
    char v18; // al@93

    v1 = 0;
    v2 = *((_DWORD *)this + 69);
    if ( !v2 )
    {
      v3 = *((_DWORD *)this + 65);
      goto LABEL_10;
    }
    if ( v2 != 1 )
    {
      v3 = *((_DWORD *)this + 65);
      if ( !v3 )
      {
        if ( *((_DWORD *)this + 56) != 3 )
        {
          if ( *((_BYTE *)this + 288) && *((_BYTE *)this + 241) != *((_BYTE *)this + 272) )
          {
            *((_BYTE *)this + 256) = 0;
            *((_DWORD *)this + 65) = 1;
            *((_DWORD *)this + 67) = 0;
            *((_BYTE *)this + 288) = 0;
            v3 = 1;
          }
          goto LABEL_8;
        }
        v17 = *((_DWORD *)this + 71);
        v3 = *((_DWORD *)this + 69);
        *((_BYTE *)this + 256) = *((_BYTE *)this + 272);
        *((_DWORD *)this + 65) = v2;
        *((_DWORD *)this + 67) = v17;
        *((_BYTE *)this + 288) = 1;
        goto LABEL_10;
      }
      goto LABEL_20;
    }
    v3 = *((_DWORD *)this + 65);
    if ( v3 )
    {
      if ( *((_BYTE *)this + 288) )
      {
  LABEL_20:
        v1 = 1;
        goto LABEL_10;
      }
      *((_DWORD *)this + 69) = 0;
    }
    else
    {
      if ( !*((_BYTE *)this + 288) )
      {
        *((_DWORD *)this + 69) = 0;
        goto LABEL_8;
      }
      v7 = *((_DWORD *)this + 71);
      if ( !v7 || *((_DWORD *)this + 63) == v7 )
      {
        v18 = *((_BYTE *)this + 272);
        v3 = 1;
        *((_DWORD *)this + 65) = 1;
        *((_BYTE *)this + 256) = v18;
        *((_DWORD *)this + 67) = v7;
      }
      *((_BYTE *)this + 288) = 0;
    }
  LABEL_10:
    if ( v3 > 5 )
    {
  LABEL_11:
      v4 = *((_DWORD *)this + 61);
      goto LABEL_12;
    }
  LABEL_8:
    switch ( v3 )
    {
      case 0u:
        goto LABEL_11;
      case 1u:
        v4 = *((_DWORD *)this + 61);
        if ( v4 == 2 && *((_DWORD *)this + 56) != 3 )
          goto LABEL_86;
        v16 = *((_DWORD *)this + 67);
        if ( !v16 || *((_DWORD *)this + 63) == v16 )
        {
          *((_DWORD *)this + 63) = v16;
          *((_BYTE *)this + 241) = *((_BYTE *)this + 256);
          *((_DWORD *)this + 61) = v3;
          v4 = v3;
          *((_DWORD *)this + 56) = 1;
          if ( v1 )
            *((_BYTE *)this + 288) = 0;
        }
        goto LABEL_72;
      case 2u:
        v14 = *((_DWORD *)this + 61);
        if ( v14 == 5 )
          goto LABEL_75;
        v8 = v14 == 1;
        goto LABEL_63;
      case 3u:
        v4 = *((_DWORD *)this + 61);
        if ( v4 == 2 && *((_DWORD *)this + 56) != 3 )
          goto LABEL_72;
        v11 = *((_BYTE *)this + 256);
        if ( (unsigned __int8)(v11 - 119) <= 2u )
        {
          v12 = *((_BYTE *)this + 49);
          if ( v12 != 3 && v12 != 4 && v12 != 9 && v12 != 10 )
          {
            if ( v12 != 13 )
              goto LABEL_72;
            v13 = *((_BYTE *)this + 240);
            if ( v13 != 3 && v13 != 4 && v13 != 9 && v13 != 10 )
              goto LABEL_72;
          }
        }
        if ( v4 != 5 && (v4 != 1 || *((_DWORD *)this + 56) == 3) )
          goto LABEL_59;
        *((_DWORD *)this + 56) = 0;
        goto LABEL_60;
      case 4u:
        v4 = *((_DWORD *)this + 61);
        if ( v4 == 2 && *((_DWORD *)this + 56) != 3
          || (v9 = *((_BYTE *)this + 49), v9 != 3)
          && v9 != 4
          && v9 != 9
          && v9 != 10
          && (v9 != 13 || (v10 = *((_BYTE *)this + 240), v10 != 3) && v10 != 4 && v10 != 9 && v10 != 10) )
        {
  LABEL_72:
          *((_DWORD *)this + 65) = 0;
          break;
        }
        if ( v4 != 5 && (v4 != 1 || *((_DWORD *)this + 56) == 3) )
        {
          v11 = *((_BYTE *)this + 256);
  LABEL_59:
          *((_DWORD *)this + 56) = *((_BYTE *)this + 241) != v11;
        }
        else
        {
          v11 = *((_BYTE *)this + 256);
          *((_DWORD *)this + 56) = 0;
        }
  LABEL_60:
        *((_BYTE *)this + 241) = v11;
        goto LABEL_66;
      case 5u:
        v4 = *((_DWORD *)this + 61);
        if ( v4 == 2 && *((_DWORD *)this + 56) != 3 )
        {
  LABEL_86:
          *((_DWORD *)this + 65) = 0;
        }
        else
        {
          if ( v4 == 3 || v4 == 5 || v4 == 4 )
            goto LABEL_75;
          v8 = v4 == 1;
  LABEL_63:
          if ( !v8 )
            goto LABEL_96;
          if ( *((_DWORD *)this + 56) != 3 )
  LABEL_75:
            *((_DWORD *)this + 56) = 0;
          else
  LABEL_96:
            *((_DWORD *)this + 56) = 1;
          *((_BYTE *)this + 241) = *((_BYTE *)this + 256);
  LABEL_66:
          v4 = v3;
          *((_DWORD *)this + 61) = v3;
          v15 = *((_DWORD *)this + 67);
          *((_DWORD *)this + 65) = 0;
          *((_DWORD *)this + 63) = v15;
          if ( v1 )
            *((_BYTE *)this + 288) = 0;
        }
        break;
    }
  LABEL_12:
    switch ( v4 )
    {
      case 1u:
        v5 = *((_DWORD *)this + 56) == 3;
        goto LABEL_14;
      case 2u:
      case 3u:
      case 4u:
        v6 = *((_DWORD *)this + 56);
        if ( !v6 )
          goto LABEL_18;
        goto LABEL_28;
      case 5u:
        v6 = *((_DWORD *)this + 56);
        if ( v6 )
        {
          if ( v6 == 1 )
          {
            *((_BYTE *)this + 218) = -128;
          }
          else
          {
  LABEL_28:
            v5 = v6 == 3;
  LABEL_14:
            if ( !v5 )
              *((_BYTE *)this + 218) = *((_BYTE *)this + 241);
          }
        }
        else
        {
  LABEL_18:
          *((_BYTE *)this + 218) = 0;
        }
        break;
      default:
        return;
    }
  }

  int __cdecl LGJCbord::setSeatParam(LGJCbord *this, unsigned __int8 a2)
  {
    signed int v2; // eax@1
    unsigned __int8 v3; // al@4
    unsigned __int8 v4; // dl@5
    int v5; // ecx@5
    int v6; // eax@9
    int result; // eax@9

    v2 = *((unsigned __int8 *)this + 344);
    if ( v2 != 13 )
    {
      if ( v2 > 13 )
      {
        if ( v2 == 14 )
        {
          v3 = 0;
          goto LABEL_5;
        }
      }
      else if ( v2 == 12 )
      {
        v3 = a2;
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if ( !a2 || a2 > 0x6Fu || (v3 = a2 - 48, a2 <= 0x3Fu) )
  LABEL_4:
      v3 = a2;
  LABEL_5:
    v4 = v3;
    v5 = 1;
    if ( v3 )
    {
      LOBYTE(v5) = 2;
      if ( v3 > 0x6Fu )
      {
        LOBYTE(v5) = 3;
        if ( (unsigned __int8)(v3 - 112) > 0xFu )
          v5 = 5 - ((unsigned __int8)(v3 + 112) < 0x30u);
      }
    }
    v6 = (unsigned __int16)(*((unsigned int *)this + 55) + 1);
    *((_DWORD *)this + 55) = v6;
    result = v6 + 1;
    switch ( v5 )
    {
      case 1:
        if ( *((_DWORD *)this + 65) != 2 )
        {
          *((_BYTE *)this + 256) = v4;
          *((_DWORD *)this + 65) = v5;
          *((_DWORD *)this + 67) = 0;
        }
        break;
      case 2:
        goto LABEL_20;
      case 3:
      case 4:
      case 5:
        if ( *((_DWORD *)this + 65) != 2 )
        {
  LABEL_20:
          *((_BYTE *)this + 256) = v4;
          *((_DWORD *)this + 65) = v5;
          *((_DWORD *)this + 67) = result;
        }
        break;
      default:
        return result;
    }
    return result;
  }

  int LGJCbord::setSeatParamStop(LGJCbord *this, int a2)
  {
    int result;
    if ( *((_DWORD *)this + 65) != 2 )
    {
      *((_BYTE *)this + 256) = 0;
      *((_DWORD *)this + 65) = 1;
      result = a2;
      *((_DWORD *)this + 67) = a2;
    }
    return result;
  }

  bool LGJCbord::send(LGJCbord *this)
  {
    char checksum_calc;
    signed int counter;
    int bytes_sent;

    // Seems to move things around? Maybe taking from 1 buffer to another to send so it can do a repeat send if something went wrong?
    serialSendBuffer[0] = classSendBuffer[0];  // This must contain 0xC0
    serialSendBuffer[1] = classSendBuffer[1];
    serialSendBuffer[2]  = classSendBuffer[2];
    serialSendBuffer[3] = classSendBuffer[3];
    serialSendBuffer[4]  = classSendBuffer[4];
    serialSendBuffer[5]  = classSendBuffer[5];

    checksum_calc = 0;
    counter = 1;
    do
      checksum_calc ^= serialSendBuffer[counter++];
    while ( counter <= 5 );

    other_checksum_variable = checksum_calc;
    serialSendBuffer[6] = checksum_calc;  // Could be stored for later on, and maybe it is required in the response to confirm it read it right?

    bytes_sent = _lgjSCI::send(serial_port_object, serialSendBuffer, 7);
    return bytes_sent == 7;
  }

  int LGJCbord::recv(LGJCbord *this) {
    signed int characters_received;
    signed int return_status;
    signed int data_start_index;
    signed int received_array_index;
    char checksum_calculator;
    char checksum_received;
    memset(serialReceiveBuffer, 0, 128);
    characters_received = _lgjSCI::recv(serial_port_object, serialReceiveBuffer, 128);

    return_status = 1;
    if (characters_received > 0) {
      data_start_index = -1;
      received_array_index = 0;

      int timeout = 0;
      while (serialReceiveBuffer[received_array_index] != 0xC0) {
        if (++received_array_index > 127) {
          timeout = 1;
          break;
        }
      }

      if(timeout == 0) {
        data_start_index = received_array_index;
      }

      return_status = 3;

      if (data_start_index < characters_received && data_start_index != -1) {
        checksum_calculator = 0;
        for ( int i = data_start_index + 1; i < data_start_index + 21 ; ++i ) {
          checksum_calculator ^= serialReceiveBuffer[i];
        }
        checksum_received = serialReceiveBuffer[21];
        return_status = 4;

        if ( checksum_received == checksum_calculator )
        {
          for(int i = 0 ; i < 21 ; i++) {
            classReceiveBuffer[i] = serialReceiveBuffer[data_start_index + i];
          }
          classReceiveBuffer[21] = checksum_received;
          return_status = 0;
        }
      }
    }
    return return_status;
  }


}
